name: Release on Production

on:
  push:
    branches: [ master ]
  release:
    types: [ published ]

jobs:
  build:
    name: Package application
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Github repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup node.js and npm
        uses: actions/setup-node@v1
        with:
          node-version: '12'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@tdesaules'
      - name: Build application
        run: |
          npm install
          npm run build:prod
      - name: Run tests
        run: npm run test
      - name: Retrieve package version
        run: grep '"version":' package.json | grep '"version":' package.json | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g' > VERSION.md
      - name: Publish package to Github
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: my-artifact
          path: |
            dist/*
            coverage/*
            VERSION.md
          if-no-files-found: error
  sonarqube:
    name: SonarQube
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout Github repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  release:
    name: Create Release
    if: ${{ github.ref == 'refs/heads/master' }}
    runs-on: ubuntu-latest
    needs: sonarqube
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: my-artifact
      - name: Set version environment variable
        run: echo "version=$(cat VERSION.md)" >> $GITHUB_ENV
      - name: Create release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.version }}
          release_name: Release/${{ env.version }}
          body: |
            Auto created release based on ${{ github.workflow }}
            by : ${{ github.actor }}
            on : ${{ github.event_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Release master branch
    if: ${{ github.event_name == 'release' }}
    runs-on: ubuntu-latest
    steps:
      - name: Setup node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@tdesaules'
      - name: Install npm resume package
        run: |
          TAG=$(echo $GITHUB_REF | sed 's/.*\([[:digit:]]\+\.[[:digit:]]\+\.[[:digit:]]\+\).*/\1/g')
          npm install @tdesaules/resume@$TAG
          mv node_modules/@tdesaules/resume/dist .
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy to Vercel
        run: |
          npm install --global vercel
          mkdir .vercel && echo '{"orgId":"${{ secrets.VERCEL_ORGID }}","projectId":"${{ secrets.VERCEL_PROJECTID_PRD }}"}' > .vercel/project.json
          vercel --token ${{ secrets.VERCEL_TOKEN }} --prod --confirm
